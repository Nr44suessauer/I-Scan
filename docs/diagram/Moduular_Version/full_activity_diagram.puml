@startuml full_activity_diagram_modular_version

skinparam activityBorderColor #333333
skinparam activityArrowColor #333333
skinparam activityEndColor #FF0000
skinparam activityStartColor #00AA00
skinparam defaultFontName Arial
skinparam defaultFontSize 12
skinparam partitionBorderColor #666666
skinparam partitionBackgroundColor #F5F5F5
skinparam swimlaneWidth same

title Activity Diagram: Overall Software Usage Process (Updated with Modular Structure)

|User|
start
:Launch Application;

|I-Scan Application|
:Initialize GUI Components (GUIBuilder);
:Load Configuration (config.py);
:Load JSON Camera Configuration (cameras_config.json);
:Initialize JSONCameraConfig & JSONCameraStreamManager;
:Setup Camera System with JSON-based Configuration;
:Initialize Backend Modules (Logger, DeviceControl, OperationQueue, AngleCalculatorInterface);
:Initialize Modular Components (EventHandlers, QueueOperations);
:Setup Enhanced Logging System;
:Start JSON Config File Monitoring Thread;
:Assign Event Callbacks to GUI Components;
note right: System Initialization Complete

|User|
partition "User Interactions" {
  fork
    :Interactive Control & Configuration|
    note left
      • Adjust API URL / Camera Settings
      • Refresh Camera List from JSON Config
      • Start/Stop Camera Streams
      • Switch Active Camera
      • Take Photo via Camera Module
      • Open Camera Configuration Dialog
      • Manually Control Servo / Stepper / LEDs
      • Query Button State
      • Execute Home Function
    end note
  fork again
    :Operation Queue Management|
    note left
      • Add Operation to Queue
      • Clear Queue
      • Remove Selected Operation
      • Duplicate Operation
      • Edit Operation Parameters
      • Move Operation Up/Down
      • Export/Import Queue to/from CSV
      • Adjust Global Queue Settings
    end note
  fork again
    :Mathematical Operations|
    note left
      • Input Parameters in Calculator Panel
      • Update Command Display
      • Click "Visualisation Mode" or "Silent Mode"
    end note
    
    |I-Scan Application|
    :Prepare Command Line Arguments;
    :Log: Starting Math Operation;
    :Launch Math Visualization Tool as Subprocess;

    |Math Visualization Tool|
    :Read Input Parameters;
    :Perform Mathematical Calculations;
    if (Visualisation Mode?) then (Yes)
      :Generate Visualization Images;
      :Save Images to output/ Directory;
    else (No)
    endif
    :Generate/Update CSV Data;
    :Save CSV Data to Disk;
    :Log: Operation Results;
    :Exit Subprocess;

    |I-Scan Application|
    if (Visualisation Mode?) then (Yes)
      :Load Generated Images;
      :Display Images in GUI Tabs;
    endif
    :Log: Math Operation Completed;
  end fork
}

|I-Scan Application|
partition "Background Processes" {
  :Monitor cameras_config.json for changes;
  if (JSON Config changed?) then (Yes)
    :Log: Configuration Change Detected;
    :Reload JSONCameraConfig;
    :Reinitialize JSONCameraStreamManager;
    :Update GUI Camera Displays;
    :Log: Camera System Reinitialized;
  else (No)
  endif
  :Continuously update GUI elements;
  :Process Enhanced Logging Messages;
  :Update Camera Stream Statistics;
}

|User|
:Decide to execute operations?;

if (Execute Queue?) then (Yes)
  :Click "Execute Queue";
  
  |I-Scan Application|
  :Start Queue Execution Thread;
  :Log: "Starting Queue Execution...";
  
  partition "Queue Processing Loop" {
    repeat
      :Check Pause/Stop Status;
      if (Paused?) then (Yes)
        :Wait for Resume;
        :Log: Queue Paused;
      endif
      if (Stopped?) then (Yes)
        :Log: Queue Stopped;
        break;
      endif
      
      :Get next Operation from Queue;
      :Log: "Executing Operation..." with Details;
      
      switch (Operation Type?)
      case (Hardware Command)
        |DeviceControl Module|
        :Prepare API Request;
        
        |External Hardware|
        :Send HTTP Request;
        :Execute Command on Hardware;
        :Send Response;
        
        |I-Scan Application|
        :Process API Response;
        :Update Internal State;
        :Log: Hardware Command Result;
        
      case (Photo)
        |Camera Module|
        :Switch to specified Camera;
        :Capture Frame from Active Stream;
        :Save Photo to File;
        :Log: Photo Captured;
        
      case (Other Operation)
        |I-Scan Application|
        :Execute internal logic;
        :Log: Operation Details;
      endswitch
      
      :Log: Operation Result with Timestamp;
      :Update GUI Displays;
      :Wait for configured delay;
    repeat while (More operations AND not stopped?) is (Yes)
    :Log: "Queue Execution Completed/Stopped!";
  }
else (No)
endif

|User|
:Close Application Window;

|I-Scan Application|
partition "Shutdown Process" {
  :Trigger on_closing event;
  :Stop JSON Configuration Monitoring;
  :Stop All Camera Streams;
  :Release All Camera Resources;
  :Close Enhanced Logging System;
  :Terminate Application;
}

stop
@enduml
